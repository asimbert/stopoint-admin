<?php
namespace TicketService\Generated;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Reservation Type
 */
final class ReservationType {
  const GeneralAdmission = 0;
  const SelectSeating = 1;
  const GeneralAdmissionAndSelectSeating = 2;
  static public $__names = array(
    0 => 'GeneralAdmission',
    1 => 'SelectSeating',
    2 => 'GeneralAdmissionAndSelectSeating',
  );
}

/**
 * Ticket Status
 */
final class TicketStatus {
  const NONE = 0;
  const LOCKED = 1;
  const PAID = 2;
  const REDEEMED = 3;
  static public $__names = array(
    0 => 'NONE',
    1 => 'LOCKED',
    2 => 'PAID',
    3 => 'REDEEMED',
  );
}

/**
 * Ticket Type
 */
final class TicketType {
  const STUB = 0;
  const SHEET = 1;
  static public $__names = array(
    0 => 'STUB',
    1 => 'SHEET',
  );
}

/**
 * Image Type
 */
final class ImageType {
  const PDF = 0;
  const PNG = 1;
  static public $__names = array(
    0 => 'PDF',
    1 => 'PNG',
  );
}

/**
 * Venue
 */
class Venue {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var \TicketService\Generated\Address
   */
  public $address = null;
  /**
   * @var double
   */
  public $serviceFee = null;
  /**
   * @var bool
   */
  public $active = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'address',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\Address',
          ),
        5 => array(
          'var' => 'serviceFee',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['serviceFee'])) {
        $this->serviceFee = $vals['serviceFee'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'Venue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->address = new \TicketService\Generated\Address();
            $xfer += $this->address->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->serviceFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venue');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 3);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      if (!is_object($this->address)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('address', TType::STRUCT, 4);
      $xfer += $this->address->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFee !== null) {
      $xfer += $output->writeFieldBegin('serviceFee', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->serviceFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BOOL, 6);
      $xfer += $output->writeBool($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 7);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Address
 */
class Address {
  static $_TSPEC;

  /**
   * @var string
   */
  public $street1 = null;
  /**
   * @var string
   */
  public $street2 = null;
  /**
   * @var string
   */
  public $street3 = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $stateProvince = null;
  /**
   * @var string
   */
  public $zipPostalCode = null;
  /**
   * @var string
   */
  public $countryRegionCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'street1',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'street2',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'street3',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'stateProvince',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'zipPostalCode',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'countryRegionCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['street1'])) {
        $this->street1 = $vals['street1'];
      }
      if (isset($vals['street2'])) {
        $this->street2 = $vals['street2'];
      }
      if (isset($vals['street3'])) {
        $this->street3 = $vals['street3'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['stateProvince'])) {
        $this->stateProvince = $vals['stateProvince'];
      }
      if (isset($vals['zipPostalCode'])) {
        $this->zipPostalCode = $vals['zipPostalCode'];
      }
      if (isset($vals['countryRegionCode'])) {
        $this->countryRegionCode = $vals['countryRegionCode'];
      }
    }
  }

  public function getName() {
    return 'Address';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->street1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->street2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->street3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stateProvince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zipPostalCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryRegionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Address');
    if ($this->street1 !== null) {
      $xfer += $output->writeFieldBegin('street1', TType::STRING, 1);
      $xfer += $output->writeString($this->street1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->street2 !== null) {
      $xfer += $output->writeFieldBegin('street2', TType::STRING, 2);
      $xfer += $output->writeString($this->street2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->street3 !== null) {
      $xfer += $output->writeFieldBegin('street3', TType::STRING, 3);
      $xfer += $output->writeString($this->street3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 4);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stateProvince !== null) {
      $xfer += $output->writeFieldBegin('stateProvince', TType::STRING, 5);
      $xfer += $output->writeString($this->stateProvince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zipPostalCode !== null) {
      $xfer += $output->writeFieldBegin('zipPostalCode', TType::STRING, 6);
      $xfer += $output->writeString($this->zipPostalCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryRegionCode !== null) {
      $xfer += $output->writeFieldBegin('countryRegionCode', TType::STRING, 7);
      $xfer += $output->writeString($this->countryRegionCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Space
 */
class Space {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $venueId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $reservationType = null;
  /**
   * @var bool
   */
  public $active = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'reservationType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['reservationType'])) {
        $this->reservationType = $vals['reservationType'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'Space';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reservationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Space');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 2);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 4);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationType !== null) {
      $xfer += $output->writeFieldBegin('reservationType', TType::I32, 5);
      $xfer += $output->writeI32($this->reservationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BOOL, 6);
      $xfer += $output->writeBool($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 7);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Section
 */
class Section {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $generalAdmission = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $seatPreference = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'generalAdmission',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generalAdmission'])) {
        $this->generalAdmission = $vals['generalAdmission'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'Section';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generalAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Section');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalAdmission !== null) {
      $xfer += $output->writeFieldBegin('generalAdmission', TType::BOOL, 4);
      $xfer += $output->writeBool($this->generalAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 5);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 6);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 7);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Row
 */
class Row {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $generalAdmission = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $seatPreference = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'generalAdmission',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generalAdmission'])) {
        $this->generalAdmission = $vals['generalAdmission'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'Row';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generalAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Row');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalAdmission !== null) {
      $xfer += $output->writeFieldBegin('generalAdmission', TType::BOOL, 5);
      $xfer += $output->writeBool($this->generalAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 6);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 7);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 8);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Seat
 */
class Seat {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $seatPreference = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'Seat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Seat');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 4);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 6);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 7);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid venue is requested
 */
class InvalidVenue extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidVenue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidVenue');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid address is sent
 */
class InvalidAddress extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidAddress';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidAddress');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid space is requested
 */
class InvalidSpace extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidSpace';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidSpace');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid section is requested
 */
class InvalidSection extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidSection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidSection');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid row is requested
 */
class InvalidRow extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidRow';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidRow');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid seat is requested
 */
class InvalidSeat extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidSeat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidSeat');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Event
 */
class Event {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $additionalInfo = null;
  /**
   * @var string
   */
  public $category = null;
  /**
   * @var int
   */
  public $minimumAge = null;
  /**
   * @var double
   */
  public $serviceFee = null;
  /**
   * @var bool
   */
  public $active = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'additionalInfo',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'minimumAge',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'serviceFee',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['additionalInfo'])) {
        $this->additionalInfo = $vals['additionalInfo'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['minimumAge'])) {
        $this->minimumAge = $vals['minimumAge'];
      }
      if (isset($vals['serviceFee'])) {
        $this->serviceFee = $vals['serviceFee'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'Event';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->additionalInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minimumAge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->serviceFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Event');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 3);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 4);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 6);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->additionalInfo !== null) {
      $xfer += $output->writeFieldBegin('additionalInfo', TType::STRING, 7);
      $xfer += $output->writeString($this->additionalInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 8);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minimumAge !== null) {
      $xfer += $output->writeFieldBegin('minimumAge', TType::I32, 9);
      $xfer += $output->writeI32($this->minimumAge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFee !== null) {
      $xfer += $output->writeFieldBegin('serviceFee', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->serviceFee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BOOL, 11);
      $xfer += $output->writeBool($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 12);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Ticket Price
 */
class TicketPrice {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var int
   */
  public $maxAmount = null;
  /**
   * @var bool
   */
  public $active = null;
  /**
   * @var string
   */
  public $saleStartTime = null;
  /**
   * @var string
   */
  public $saleEndTime = null;
  /**
   * @var string
   */
  public $addedTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'maxAmount',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'saleStartTime',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'saleEndTime',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['maxAmount'])) {
        $this->maxAmount = $vals['maxAmount'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['saleStartTime'])) {
        $this->saleStartTime = $vals['saleStartTime'];
      }
      if (isset($vals['saleEndTime'])) {
        $this->saleEndTime = $vals['saleEndTime'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
    }
  }

  public function getName() {
    return 'TicketPrice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TicketPrice');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 2);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 5);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 6);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 7);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxAmount !== null) {
      $xfer += $output->writeFieldBegin('maxAmount', TType::I32, 8);
      $xfer += $output->writeI32($this->maxAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BOOL, 9);
      $xfer += $output->writeBool($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleStartTime !== null) {
      $xfer += $output->writeFieldBegin('saleStartTime', TType::STRING, 10);
      $xfer += $output->writeString($this->saleStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleEndTime !== null) {
      $xfer += $output->writeFieldBegin('saleEndTime', TType::STRING, 11);
      $xfer += $output->writeString($this->saleEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 12);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid event is requested
 */
class InvalidEvent extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidEvent');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid ticket price is requested
 */
class InvalidTicketPrice extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidTicketPrice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidTicketPrice');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Ticket
 */
class Ticket {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var int
   */
  public $ticketPriceId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var bool
   */
  public $isGeneralAdmission = null;
  /**
   * @var int
   */
  public $personAccountId = null;
  /**
   * @var int
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $onSaleTime = null;
  /**
   * @var string
   */
  public $lockExpireTime = null;
  /**
   * @var string
   */
  public $purchaseTime = null;
  /**
   * @var string
   */
  public $redeemTime = null;
  /**
   * @var string
   */
  public $addedTime = null;
  /**
   * @var bool
   */
  public $active = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'ticketPriceId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'isGeneralAdmission',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'personAccountId',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'onSaleTime',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'lockExpireTime',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'purchaseTime',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'redeemTime',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'addedTime',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['ticketPriceId'])) {
        $this->ticketPriceId = $vals['ticketPriceId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['isGeneralAdmission'])) {
        $this->isGeneralAdmission = $vals['isGeneralAdmission'];
      }
      if (isset($vals['personAccountId'])) {
        $this->personAccountId = $vals['personAccountId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['onSaleTime'])) {
        $this->onSaleTime = $vals['onSaleTime'];
      }
      if (isset($vals['lockExpireTime'])) {
        $this->lockExpireTime = $vals['lockExpireTime'];
      }
      if (isset($vals['purchaseTime'])) {
        $this->purchaseTime = $vals['purchaseTime'];
      }
      if (isset($vals['redeemTime'])) {
        $this->redeemTime = $vals['redeemTime'];
      }
      if (isset($vals['addedTime'])) {
        $this->addedTime = $vals['addedTime'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
    }
  }

  public function getName() {
    return 'Ticket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketPriceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isGeneralAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->personAccountId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onSaleTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lockExpireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->purchaseTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->redeemTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ticket');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 2);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketPriceId !== null) {
      $xfer += $output->writeFieldBegin('ticketPriceId', TType::I64, 3);
      $xfer += $output->writeI64($this->ticketPriceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 6);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 7);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 8);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isGeneralAdmission !== null) {
      $xfer += $output->writeFieldBegin('isGeneralAdmission', TType::BOOL, 9);
      $xfer += $output->writeBool($this->isGeneralAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personAccountId !== null) {
      $xfer += $output->writeFieldBegin('personAccountId', TType::I64, 10);
      $xfer += $output->writeI64($this->personAccountId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 11);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSaleTime !== null) {
      $xfer += $output->writeFieldBegin('onSaleTime', TType::STRING, 12);
      $xfer += $output->writeString($this->onSaleTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockExpireTime !== null) {
      $xfer += $output->writeFieldBegin('lockExpireTime', TType::STRING, 13);
      $xfer += $output->writeString($this->lockExpireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->purchaseTime !== null) {
      $xfer += $output->writeFieldBegin('purchaseTime', TType::STRING, 14);
      $xfer += $output->writeString($this->purchaseTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redeemTime !== null) {
      $xfer += $output->writeFieldBegin('redeemTime', TType::STRING, 15);
      $xfer += $output->writeString($this->redeemTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addedTime !== null) {
      $xfer += $output->writeFieldBegin('addedTime', TType::STRING, 16);
      $xfer += $output->writeString($this->addedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BOOL, 17);
      $xfer += $output->writeBool($this->active);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid ticket is requested
 */
class InvalidTicket extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidTicket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidTicket');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an ticket is unavailable
 */
class TicketUnavailable extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TicketUnavailable';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TicketUnavailable');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Thrown if an invalid amount is requested
 */
class InvalidAmount extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'InvalidAmount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidAmount');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


