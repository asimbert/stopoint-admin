<?php
namespace TicketService\Generated;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface TicketsIf {
  /**
   * @param int $eventId
   * @param int $amount
   * @param double $minPrice
   * @param double $maxPrice
   * @return \TicketService\Generated\Ticket[]
   * @throws \TicketService\Generated\InvalidEvent
   * @throws \TicketService\Generated\InvalidAmount
   */
  public function getBestAvailableTickets($eventId, $amount, $minPrice, $maxPrice);
  /**
   * @param int $eventId
   * @param int $sectionId
   * @param double $minPrice
   * @param double $maxPrice
   * @return \TicketService\Generated\Ticket[]
   * @throws \TicketService\Generated\InvalidEvent
   * @throws \TicketService\Generated\InvalidSection
   */
  public function getAvailableTicketsBySection($eventId, $sectionId, $minPrice, $maxPrice);
  /**
   * @param int $eventId
   * @param int $sectionId
   * @param int $rowId
   * @param double $minPrice
   * @param double $maxPrice
   * @return \TicketService\Generated\Ticket[]
   * @throws \TicketService\Generated\InvalidEvent
   * @throws \TicketService\Generated\InvalidSection
   * @throws \TicketService\Generated\InvalidRow
   */
  public function getAvailableTicketsByRow($eventId, $sectionId, $rowId, $minPrice, $maxPrice);
  /**
   * @param int $ticketId
   * @return bool
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function isTicketAvailable($ticketId);
  /**
   * @param int $ticketId
   * @return int Ticket Status
   * 
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function getTicketStatus($ticketId);
  /**
   * @param int $ticketId
   * @return \TicketService\Generated\Ticket Ticket
   * 
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function getTicket($ticketId);
  /**
   * @param int $ticketId
   * @return string
   * @throws \TicketService\Generated\InvalidTicket
   * @throws \TicketService\Generated\TicketUnavailable
   */
  public function lockTicket($ticketId);
  /**
   * @param int $ticketId
   * @return bool
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function unlockTicket($ticketId);
  /**
   * @param int $ticketId
   * @param int $personAccountId
   * @param int $orderId
   * @return \TicketService\Generated\Ticket Ticket
   * 
   * @throws \TicketService\Generated\InvalidTicket
   * @throws \TicketService\Generated\TicketUnavailable
   */
  public function registerTicketPurchase($ticketId, $personAccountId, $orderId);
  /**
   * @param int $ticketId
   * @return \TicketService\Generated\Ticket Ticket
   * 
   * @throws \TicketService\Generated\InvalidTicket
   * @throws \TicketService\Generated\TicketUnavailable
   */
  public function redeemTicket($ticketId);
  /**
   * @param int $ticketId
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function activateTicket($ticketId);
  /**
   * @param int $ticketId
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function deactivateTicket($ticketId);
  /**
   * @param int $personAccountId
   * @param int $orderId
   * @param int $ticketType
   * @param int $imageType
   * @return string
   * @throws \TicketService\Generated\InvalidTicket
   */
  public function getTicketUrl($personAccountId, $orderId, $ticketType, $imageType);
}

class TicketsClient implements \TicketService\Generated\TicketsIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getBestAvailableTickets($eventId, $amount, $minPrice, $maxPrice)
  {
    $this->send_getBestAvailableTickets($eventId, $amount, $minPrice, $maxPrice);
    return $this->recv_getBestAvailableTickets();
  }

  public function send_getBestAvailableTickets($eventId, $amount, $minPrice, $maxPrice)
  {
    $args = new \TicketService\Generated\Tickets_getBestAvailableTickets_args();
    $args->eventId = $eventId;
    $args->amount = $amount;
    $args->minPrice = $minPrice;
    $args->maxPrice = $maxPrice;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBestAvailableTickets', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBestAvailableTickets', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBestAvailableTickets()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_getBestAvailableTickets_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_getBestAvailableTickets_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    if ($result->invalidAmount !== null) {
      throw $result->invalidAmount;
    }
    throw new \Exception("getBestAvailableTickets failed: unknown result");
  }

  public function getAvailableTicketsBySection($eventId, $sectionId, $minPrice, $maxPrice)
  {
    $this->send_getAvailableTicketsBySection($eventId, $sectionId, $minPrice, $maxPrice);
    return $this->recv_getAvailableTicketsBySection();
  }

  public function send_getAvailableTicketsBySection($eventId, $sectionId, $minPrice, $maxPrice)
  {
    $args = new \TicketService\Generated\Tickets_getAvailableTicketsBySection_args();
    $args->eventId = $eventId;
    $args->sectionId = $sectionId;
    $args->minPrice = $minPrice;
    $args->maxPrice = $maxPrice;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAvailableTicketsBySection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAvailableTicketsBySection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAvailableTicketsBySection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_getAvailableTicketsBySection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_getAvailableTicketsBySection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    throw new \Exception("getAvailableTicketsBySection failed: unknown result");
  }

  public function getAvailableTicketsByRow($eventId, $sectionId, $rowId, $minPrice, $maxPrice)
  {
    $this->send_getAvailableTicketsByRow($eventId, $sectionId, $rowId, $minPrice, $maxPrice);
    return $this->recv_getAvailableTicketsByRow();
  }

  public function send_getAvailableTicketsByRow($eventId, $sectionId, $rowId, $minPrice, $maxPrice)
  {
    $args = new \TicketService\Generated\Tickets_getAvailableTicketsByRow_args();
    $args->eventId = $eventId;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->minPrice = $minPrice;
    $args->maxPrice = $maxPrice;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAvailableTicketsByRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAvailableTicketsByRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAvailableTicketsByRow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_getAvailableTicketsByRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_getAvailableTicketsByRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    if ($result->invalidRow !== null) {
      throw $result->invalidRow;
    }
    throw new \Exception("getAvailableTicketsByRow failed: unknown result");
  }

  public function isTicketAvailable($ticketId)
  {
    $this->send_isTicketAvailable($ticketId);
    return $this->recv_isTicketAvailable();
  }

  public function send_isTicketAvailable($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_isTicketAvailable_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'isTicketAvailable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('isTicketAvailable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_isTicketAvailable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_isTicketAvailable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_isTicketAvailable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    throw new \Exception("isTicketAvailable failed: unknown result");
  }

  public function getTicketStatus($ticketId)
  {
    $this->send_getTicketStatus($ticketId);
    return $this->recv_getTicketStatus();
  }

  public function send_getTicketStatus($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_getTicketStatus_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_getTicketStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_getTicketStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    throw new \Exception("getTicketStatus failed: unknown result");
  }

  public function getTicket($ticketId)
  {
    $this->send_getTicket($ticketId);
    return $this->recv_getTicket();
  }

  public function send_getTicket($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_getTicket_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_getTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_getTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    throw new \Exception("getTicket failed: unknown result");
  }

  public function lockTicket($ticketId)
  {
    $this->send_lockTicket($ticketId);
    return $this->recv_lockTicket();
  }

  public function send_lockTicket($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_lockTicket_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lockTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lockTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lockTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_lockTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_lockTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    if ($result->ticketUnavailable !== null) {
      throw $result->ticketUnavailable;
    }
    throw new \Exception("lockTicket failed: unknown result");
  }

  public function unlockTicket($ticketId)
  {
    $this->send_unlockTicket($ticketId);
    return $this->recv_unlockTicket();
  }

  public function send_unlockTicket($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_unlockTicket_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unlockTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unlockTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unlockTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_unlockTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_unlockTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    throw new \Exception("unlockTicket failed: unknown result");
  }

  public function registerTicketPurchase($ticketId, $personAccountId, $orderId)
  {
    $this->send_registerTicketPurchase($ticketId, $personAccountId, $orderId);
    return $this->recv_registerTicketPurchase();
  }

  public function send_registerTicketPurchase($ticketId, $personAccountId, $orderId)
  {
    $args = new \TicketService\Generated\Tickets_registerTicketPurchase_args();
    $args->ticketId = $ticketId;
    $args->personAccountId = $personAccountId;
    $args->orderId = $orderId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'registerTicketPurchase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('registerTicketPurchase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_registerTicketPurchase()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_registerTicketPurchase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_registerTicketPurchase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    if ($result->ticketUnavailable !== null) {
      throw $result->ticketUnavailable;
    }
    throw new \Exception("registerTicketPurchase failed: unknown result");
  }

  public function redeemTicket($ticketId)
  {
    $this->send_redeemTicket($ticketId);
    return $this->recv_redeemTicket();
  }

  public function send_redeemTicket($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_redeemTicket_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'redeemTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('redeemTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_redeemTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_redeemTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_redeemTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    if ($result->ticketUnavailable !== null) {
      throw $result->ticketUnavailable;
    }
    throw new \Exception("redeemTicket failed: unknown result");
  }

  public function activateTicket($ticketId)
  {
    $this->send_activateTicket($ticketId);
    $this->recv_activateTicket();
  }

  public function send_activateTicket($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_activateTicket_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activateTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activateTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activateTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_activateTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_activateTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    return;
  }

  public function deactivateTicket($ticketId)
  {
    $this->send_deactivateTicket($ticketId);
    $this->recv_deactivateTicket();
  }

  public function send_deactivateTicket($ticketId)
  {
    $args = new \TicketService\Generated\Tickets_deactivateTicket_args();
    $args->ticketId = $ticketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deactivateTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deactivateTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deactivateTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_deactivateTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_deactivateTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    return;
  }

  public function getTicketUrl($personAccountId, $orderId, $ticketType, $imageType)
  {
    $this->send_getTicketUrl($personAccountId, $orderId, $ticketType, $imageType);
    return $this->recv_getTicketUrl();
  }

  public function send_getTicketUrl($personAccountId, $orderId, $ticketType, $imageType)
  {
    $args = new \TicketService\Generated\Tickets_getTicketUrl_args();
    $args->personAccountId = $personAccountId;
    $args->orderId = $orderId;
    $args->ticketType = $ticketType;
    $args->imageType = $imageType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketUrl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketUrl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketUrl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Tickets_getTicketUrl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Tickets_getTicketUrl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicket !== null) {
      throw $result->invalidTicket;
    }
    throw new \Exception("getTicketUrl failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Tickets_getBestAvailableTickets_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var int
   */
  public $amount = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var double
   */
  public $maxPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['maxPrice'])) {
        $this->maxPrice = $vals['maxPrice'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getBestAvailableTickets_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->maxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getBestAvailableTickets_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 2);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPrice !== null) {
      $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->maxPrice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getBestAvailableTickets_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Ticket[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;
  /**
   * @var \TicketService\Generated\InvalidAmount
   */
  public $invalidAmount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Ticket',
            ),
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        2 => array(
          'var' => 'invalidAmount',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidAmount',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
      if (isset($vals['invalidAmount'])) {
        $this->invalidAmount = $vals['invalidAmount'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getBestAvailableTickets_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size85 = 0;
            $_etype88 = 0;
            $xfer += $input->readListBegin($_etype88, $_size85);
            for ($_i89 = 0; $_i89 < $_size85; ++$_i89)
            {
              $elem90 = null;
              $elem90 = new \TicketService\Generated\Ticket();
              $xfer += $elem90->read($input);
              $this->success []= $elem90;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidAmount = new \TicketService\Generated\InvalidAmount();
            $xfer += $this->invalidAmount->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getBestAvailableTickets_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter91)
          {
            $xfer += $iter91->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidAmount !== null) {
      $xfer += $output->writeFieldBegin('invalidAmount', TType::STRUCT, 2);
      $xfer += $this->invalidAmount->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getAvailableTicketsBySection_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var double
   */
  public $maxPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['maxPrice'])) {
        $this->maxPrice = $vals['maxPrice'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getAvailableTicketsBySection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->maxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getAvailableTicketsBySection_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 2);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPrice !== null) {
      $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->maxPrice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getAvailableTicketsBySection_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Ticket[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;
  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Ticket',
            ),
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        2 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getAvailableTicketsBySection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size92 = 0;
            $_etype95 = 0;
            $xfer += $input->readListBegin($_etype95, $_size92);
            for ($_i96 = 0; $_i96 < $_size92; ++$_i96)
            {
              $elem97 = null;
              $elem97 = new \TicketService\Generated\Ticket();
              $xfer += $elem97->read($input);
              $this->success []= $elem97;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getAvailableTicketsBySection_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter98)
          {
            $xfer += $iter98->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 2);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getAvailableTicketsByRow_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var double
   */
  public $maxPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['maxPrice'])) {
        $this->maxPrice = $vals['maxPrice'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getAvailableTicketsByRow_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->maxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getAvailableTicketsByRow_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 2);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 3);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPrice !== null) {
      $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->maxPrice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getAvailableTicketsByRow_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Ticket[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;
  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;
  /**
   * @var \TicketService\Generated\InvalidRow
   */
  public $invalidRow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Ticket',
            ),
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        2 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        3 => array(
          'var' => 'invalidRow',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidRow',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
      if (isset($vals['invalidRow'])) {
        $this->invalidRow = $vals['invalidRow'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getAvailableTicketsByRow_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size99 = 0;
            $_etype102 = 0;
            $xfer += $input->readListBegin($_etype102, $_size99);
            for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
            {
              $elem104 = null;
              $elem104 = new \TicketService\Generated\Ticket();
              $xfer += $elem104->read($input);
              $this->success []= $elem104;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->invalidRow = new \TicketService\Generated\InvalidRow();
            $xfer += $this->invalidRow->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getAvailableTicketsByRow_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter105)
          {
            $xfer += $iter105->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 2);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidRow !== null) {
      $xfer += $output->writeFieldBegin('invalidRow', TType::STRUCT, 3);
      $xfer += $this->invalidRow->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_isTicketAvailable_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_isTicketAvailable_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_isTicketAvailable_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_isTicketAvailable_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_isTicketAvailable_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_isTicketAvailable_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getTicketStatus_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getTicketStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getTicketStatus_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getTicketStatus_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getTicketStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getTicketStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getTicket_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getTicket_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getTicket_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getTicket_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Ticket
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\Ticket',
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getTicket_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TicketService\Generated\Ticket();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getTicket_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_lockTicket_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_lockTicket_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_lockTicket_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_lockTicket_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;
  /**
   * @var \TicketService\Generated\TicketUnavailable
   */
  public $ticketUnavailable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        2 => array(
          'var' => 'ticketUnavailable',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\TicketUnavailable',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
      if (isset($vals['ticketUnavailable'])) {
        $this->ticketUnavailable = $vals['ticketUnavailable'];
      }
    }
  }

  public function getName() {
    return 'Tickets_lockTicket_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ticketUnavailable = new \TicketService\Generated\TicketUnavailable();
            $xfer += $this->ticketUnavailable->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_lockTicket_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketUnavailable !== null) {
      $xfer += $output->writeFieldBegin('ticketUnavailable', TType::STRUCT, 2);
      $xfer += $this->ticketUnavailable->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_unlockTicket_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_unlockTicket_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_unlockTicket_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_unlockTicket_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_unlockTicket_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_unlockTicket_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_registerTicketPurchase_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;
  /**
   * @var int
   */
  public $personAccountId = null;
  /**
   * @var int
   */
  public $orderId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'personAccountId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
      if (isset($vals['personAccountId'])) {
        $this->personAccountId = $vals['personAccountId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_registerTicketPurchase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->personAccountId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_registerTicketPurchase_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personAccountId !== null) {
      $xfer += $output->writeFieldBegin('personAccountId', TType::I64, 2);
      $xfer += $output->writeI64($this->personAccountId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 3);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_registerTicketPurchase_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Ticket
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;
  /**
   * @var \TicketService\Generated\TicketUnavailable
   */
  public $ticketUnavailable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\Ticket',
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        2 => array(
          'var' => 'ticketUnavailable',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\TicketUnavailable',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
      if (isset($vals['ticketUnavailable'])) {
        $this->ticketUnavailable = $vals['ticketUnavailable'];
      }
    }
  }

  public function getName() {
    return 'Tickets_registerTicketPurchase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TicketService\Generated\Ticket();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ticketUnavailable = new \TicketService\Generated\TicketUnavailable();
            $xfer += $this->ticketUnavailable->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_registerTicketPurchase_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketUnavailable !== null) {
      $xfer += $output->writeFieldBegin('ticketUnavailable', TType::STRUCT, 2);
      $xfer += $this->ticketUnavailable->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_redeemTicket_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_redeemTicket_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_redeemTicket_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_redeemTicket_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Ticket
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;
  /**
   * @var \TicketService\Generated\TicketUnavailable
   */
  public $ticketUnavailable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\Ticket',
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        2 => array(
          'var' => 'ticketUnavailable',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\TicketUnavailable',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
      if (isset($vals['ticketUnavailable'])) {
        $this->ticketUnavailable = $vals['ticketUnavailable'];
      }
    }
  }

  public function getName() {
    return 'Tickets_redeemTicket_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TicketService\Generated\Ticket();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ticketUnavailable = new \TicketService\Generated\TicketUnavailable();
            $xfer += $this->ticketUnavailable->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_redeemTicket_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketUnavailable !== null) {
      $xfer += $output->writeFieldBegin('ticketUnavailable', TType::STRUCT, 2);
      $xfer += $this->ticketUnavailable->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_activateTicket_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_activateTicket_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_activateTicket_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_activateTicket_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_activateTicket_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_activateTicket_result');
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_deactivateTicket_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketId'])) {
        $this->ticketId = $vals['ticketId'];
      }
    }
  }

  public function getName() {
    return 'Tickets_deactivateTicket_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_deactivateTicket_args');
    if ($this->ticketId !== null) {
      $xfer += $output->writeFieldBegin('ticketId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_deactivateTicket_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_deactivateTicket_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_deactivateTicket_result');
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getTicketUrl_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $personAccountId = null;
  /**
   * @var int
   */
  public $orderId = null;
  /**
   * @var int
   */
  public $ticketType = null;
  /**
   * @var int
   */
  public $imageType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'personAccountId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'ticketType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'imageType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['personAccountId'])) {
        $this->personAccountId = $vals['personAccountId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['ticketType'])) {
        $this->ticketType = $vals['ticketType'];
      }
      if (isset($vals['imageType'])) {
        $this->imageType = $vals['imageType'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getTicketUrl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->personAccountId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ticketType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->imageType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getTicketUrl_args');
    if ($this->personAccountId !== null) {
      $xfer += $output->writeFieldBegin('personAccountId', TType::I64, 1);
      $xfer += $output->writeI64($this->personAccountId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 2);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketType !== null) {
      $xfer += $output->writeFieldBegin('ticketType', TType::I32, 3);
      $xfer += $output->writeI32($this->ticketType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageType !== null) {
      $xfer += $output->writeFieldBegin('imageType', TType::I32, 4);
      $xfer += $output->writeI32($this->imageType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tickets_getTicketUrl_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicket
   */
  public $invalidTicket = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'invalidTicket',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicket',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicket'])) {
        $this->invalidTicket = $vals['invalidTicket'];
      }
    }
  }

  public function getName() {
    return 'Tickets_getTicketUrl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicket = new \TicketService\Generated\InvalidTicket();
            $xfer += $this->invalidTicket->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tickets_getTicketUrl_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicket !== null) {
      $xfer += $output->writeFieldBegin('invalidTicket', TType::STRUCT, 1);
      $xfer += $this->invalidTicket->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


