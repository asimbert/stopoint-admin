<?php
namespace TicketService\Generated;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface EventsIf {
  /**
   * @return \TicketService\Generated\Event[]
   */
  public function getEvents();
  /**
   * @param int $venueId
   * @param int $spaceId
   * @param string $startTime
   * @param string $endTime
   * @param string $category
   * @param string $city
   * @param string $stateProvince
   * @param string $zipPostalCode
   * @param string $countryRegionCode
   * @return \TicketService\Generated\Event[]
   */
  public function getEventsByFilter($venueId, $spaceId, $startTime, $endTime, $category, $city, $stateProvince, $zipPostalCode, $countryRegionCode);
  /**
   * @param int $spaceId
   * @param string $startTime
   * @param string $endTime
   * @param string $name
   * @param string $description
   * @param string $additionalInfo
   * @param string $category
   * @param int $minimumAge
   * @param double $serviceFee
   * @return int
   */
  public function addEvent($spaceId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee);
  /**
   * @param int $eventId
   * @param string $startTime
   * @param string $endTime
   * @param string $name
   * @param string $description
   * @param string $additionalInfo
   * @param string $category
   * @param int $minimumAge
   * @param double $serviceFee
   * @return bool
   * @throws \TicketService\Generated\InvalidEvent
   */
  public function editEvent($eventId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee);
  /**
   * @param int $eventId
   * @throws \TicketService\Generated\InvalidEvent
   */
  public function activateEvent($eventId);
  /**
   * @param int $eventId
   * @throws \TicketService\Generated\InvalidEvent
   */
  public function deactivateEvent($eventId);
  /**
   * @param int $eventId
   * @return bool
   * @throws \TicketService\Generated\InvalidEvent
   */
  public function removeEvent($eventId);
  /**
   * @param int $eventId
   * @return \TicketService\Generated\TicketPrice[]
   * @throws \TicketService\Generated\InvalidEvent
   */
  public function getTicketPricesByEvent($eventId);
  /**
   * @param int $eventId
   * @param string $name
   * @param double $price
   * @param int $sectionId
   * @param int $rowId
   * @param int $seatId
   * @param string $saleStartTime
   * @param string $saleEndTime
   * @return int
   * @throws \TicketService\Generated\InvalidEvent
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function addTicketPrice($eventId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime);
  /**
   * @param int $ticketPriceId
   * @param string $name
   * @param double $price
   * @param int $sectionId
   * @param int $rowId
   * @param int $seatId
   * @param string $saleStartTime
   * @param string $saleEndTime
   * @return bool
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function editTicketPrice($ticketPriceId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime);
  /**
   * @param int $eventId
   * @param string $name
   * @param double $price
   * @param int $sectionId
   * @param int $rowId
   * @param int $maxAmount
   * @param string $saleStartTime
   * @param string $saleEndTime
   * @return int
   * @throws \TicketService\Generated\InvalidEvent
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function addTicketPriceForGeneralAdmission($eventId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime);
  /**
   * @param int $ticketPriceId
   * @param string $name
   * @param double $price
   * @param int $sectionId
   * @param int $rowId
   * @param int $maxAmount
   * @param string $saleStartTime
   * @param string $saleEndTime
   * @return bool
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function editTicketPriceForGeneralAdmission($ticketPriceId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime);
  /**
   * @param int $ticketPriceId
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function activateTicketPrice($ticketPriceId);
  /**
   * @param int $ticketPriceId
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function deactivateTicketPrice($ticketPriceId);
  /**
   * @param int $ticketPriceId
   * @return bool
   * @throws \TicketService\Generated\InvalidTicketPrice
   */
  public function removeTicketPrice($ticketPriceId);
}

class EventsClient implements \TicketService\Generated\EventsIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getEvents()
  {
    $this->send_getEvents();
    return $this->recv_getEvents();
  }

  public function send_getEvents()
  {
    $args = new \TicketService\Generated\Events_getEvents_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEvents', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEvents', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEvents()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_getEvents_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_getEvents_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getEvents failed: unknown result");
  }

  public function getEventsByFilter($venueId, $spaceId, $startTime, $endTime, $category, $city, $stateProvince, $zipPostalCode, $countryRegionCode)
  {
    $this->send_getEventsByFilter($venueId, $spaceId, $startTime, $endTime, $category, $city, $stateProvince, $zipPostalCode, $countryRegionCode);
    return $this->recv_getEventsByFilter();
  }

  public function send_getEventsByFilter($venueId, $spaceId, $startTime, $endTime, $category, $city, $stateProvince, $zipPostalCode, $countryRegionCode)
  {
    $args = new \TicketService\Generated\Events_getEventsByFilter_args();
    $args->venueId = $venueId;
    $args->spaceId = $spaceId;
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->category = $category;
    $args->city = $city;
    $args->stateProvince = $stateProvince;
    $args->zipPostalCode = $zipPostalCode;
    $args->countryRegionCode = $countryRegionCode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEventsByFilter', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEventsByFilter', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEventsByFilter()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_getEventsByFilter_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_getEventsByFilter_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getEventsByFilter failed: unknown result");
  }

  public function addEvent($spaceId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee)
  {
    $this->send_addEvent($spaceId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee);
    return $this->recv_addEvent();
  }

  public function send_addEvent($spaceId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee)
  {
    $args = new \TicketService\Generated\Events_addEvent_args();
    $args->spaceId = $spaceId;
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->name = $name;
    $args->description = $description;
    $args->additionalInfo = $additionalInfo;
    $args->category = $category;
    $args->minimumAge = $minimumAge;
    $args->serviceFee = $serviceFee;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_addEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_addEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addEvent failed: unknown result");
  }

  public function editEvent($eventId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee)
  {
    $this->send_editEvent($eventId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee);
    return $this->recv_editEvent();
  }

  public function send_editEvent($eventId, $startTime, $endTime, $name, $description, $additionalInfo, $category, $minimumAge, $serviceFee)
  {
    $args = new \TicketService\Generated\Events_editEvent_args();
    $args->eventId = $eventId;
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->name = $name;
    $args->description = $description;
    $args->additionalInfo = $additionalInfo;
    $args->category = $category;
    $args->minimumAge = $minimumAge;
    $args->serviceFee = $serviceFee;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_editEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_editEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    throw new \Exception("editEvent failed: unknown result");
  }

  public function activateEvent($eventId)
  {
    $this->send_activateEvent($eventId);
    $this->recv_activateEvent();
  }

  public function send_activateEvent($eventId)
  {
    $args = new \TicketService\Generated\Events_activateEvent_args();
    $args->eventId = $eventId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activateEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activateEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activateEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_activateEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_activateEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    return;
  }

  public function deactivateEvent($eventId)
  {
    $this->send_deactivateEvent($eventId);
    $this->recv_deactivateEvent();
  }

  public function send_deactivateEvent($eventId)
  {
    $args = new \TicketService\Generated\Events_deactivateEvent_args();
    $args->eventId = $eventId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deactivateEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deactivateEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deactivateEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_deactivateEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_deactivateEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    return;
  }

  public function removeEvent($eventId)
  {
    $this->send_removeEvent($eventId);
    return $this->recv_removeEvent();
  }

  public function send_removeEvent($eventId)
  {
    $args = new \TicketService\Generated\Events_removeEvent_args();
    $args->eventId = $eventId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_removeEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_removeEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    throw new \Exception("removeEvent failed: unknown result");
  }

  public function getTicketPricesByEvent($eventId)
  {
    $this->send_getTicketPricesByEvent($eventId);
    return $this->recv_getTicketPricesByEvent();
  }

  public function send_getTicketPricesByEvent($eventId)
  {
    $args = new \TicketService\Generated\Events_getTicketPricesByEvent_args();
    $args->eventId = $eventId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketPricesByEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketPricesByEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketPricesByEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_getTicketPricesByEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_getTicketPricesByEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    throw new \Exception("getTicketPricesByEvent failed: unknown result");
  }

  public function addTicketPrice($eventId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime)
  {
    $this->send_addTicketPrice($eventId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime);
    return $this->recv_addTicketPrice();
  }

  public function send_addTicketPrice($eventId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime)
  {
    $args = new \TicketService\Generated\Events_addTicketPrice_args();
    $args->eventId = $eventId;
    $args->name = $name;
    $args->price = $price;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->seatId = $seatId;
    $args->saleStartTime = $saleStartTime;
    $args->saleEndTime = $saleEndTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addTicketPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addTicketPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addTicketPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_addTicketPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_addTicketPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    throw new \Exception("addTicketPrice failed: unknown result");
  }

  public function editTicketPrice($ticketPriceId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime)
  {
    $this->send_editTicketPrice($ticketPriceId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime);
    return $this->recv_editTicketPrice();
  }

  public function send_editTicketPrice($ticketPriceId, $name, $price, $sectionId, $rowId, $seatId, $saleStartTime, $saleEndTime)
  {
    $args = new \TicketService\Generated\Events_editTicketPrice_args();
    $args->ticketPriceId = $ticketPriceId;
    $args->name = $name;
    $args->price = $price;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->seatId = $seatId;
    $args->saleStartTime = $saleStartTime;
    $args->saleEndTime = $saleEndTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editTicketPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editTicketPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editTicketPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_editTicketPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_editTicketPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    throw new \Exception("editTicketPrice failed: unknown result");
  }

  public function addTicketPriceForGeneralAdmission($eventId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime)
  {
    $this->send_addTicketPriceForGeneralAdmission($eventId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime);
    return $this->recv_addTicketPriceForGeneralAdmission();
  }

  public function send_addTicketPriceForGeneralAdmission($eventId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime)
  {
    $args = new \TicketService\Generated\Events_addTicketPriceForGeneralAdmission_args();
    $args->eventId = $eventId;
    $args->name = $name;
    $args->price = $price;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->maxAmount = $maxAmount;
    $args->saleStartTime = $saleStartTime;
    $args->saleEndTime = $saleEndTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addTicketPriceForGeneralAdmission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addTicketPriceForGeneralAdmission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addTicketPriceForGeneralAdmission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_addTicketPriceForGeneralAdmission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_addTicketPriceForGeneralAdmission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidEvent !== null) {
      throw $result->invalidEvent;
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    throw new \Exception("addTicketPriceForGeneralAdmission failed: unknown result");
  }

  public function editTicketPriceForGeneralAdmission($ticketPriceId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime)
  {
    $this->send_editTicketPriceForGeneralAdmission($ticketPriceId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime);
    return $this->recv_editTicketPriceForGeneralAdmission();
  }

  public function send_editTicketPriceForGeneralAdmission($ticketPriceId, $name, $price, $sectionId, $rowId, $maxAmount, $saleStartTime, $saleEndTime)
  {
    $args = new \TicketService\Generated\Events_editTicketPriceForGeneralAdmission_args();
    $args->ticketPriceId = $ticketPriceId;
    $args->name = $name;
    $args->price = $price;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->maxAmount = $maxAmount;
    $args->saleStartTime = $saleStartTime;
    $args->saleEndTime = $saleEndTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editTicketPriceForGeneralAdmission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editTicketPriceForGeneralAdmission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editTicketPriceForGeneralAdmission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_editTicketPriceForGeneralAdmission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_editTicketPriceForGeneralAdmission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    throw new \Exception("editTicketPriceForGeneralAdmission failed: unknown result");
  }

  public function activateTicketPrice($ticketPriceId)
  {
    $this->send_activateTicketPrice($ticketPriceId);
    $this->recv_activateTicketPrice();
  }

  public function send_activateTicketPrice($ticketPriceId)
  {
    $args = new \TicketService\Generated\Events_activateTicketPrice_args();
    $args->ticketPriceId = $ticketPriceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activateTicketPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activateTicketPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activateTicketPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_activateTicketPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_activateTicketPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    return;
  }

  public function deactivateTicketPrice($ticketPriceId)
  {
    $this->send_deactivateTicketPrice($ticketPriceId);
    $this->recv_deactivateTicketPrice();
  }

  public function send_deactivateTicketPrice($ticketPriceId)
  {
    $args = new \TicketService\Generated\Events_deactivateTicketPrice_args();
    $args->ticketPriceId = $ticketPriceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deactivateTicketPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deactivateTicketPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deactivateTicketPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_deactivateTicketPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_deactivateTicketPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    return;
  }

  public function removeTicketPrice($ticketPriceId)
  {
    $this->send_removeTicketPrice($ticketPriceId);
    return $this->recv_removeTicketPrice();
  }

  public function send_removeTicketPrice($ticketPriceId)
  {
    $args = new \TicketService\Generated\Events_removeTicketPrice_args();
    $args->ticketPriceId = $ticketPriceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeTicketPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeTicketPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeTicketPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Events_removeTicketPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Events_removeTicketPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidTicketPrice !== null) {
      throw $result->invalidTicketPrice;
    }
    throw new \Exception("removeTicketPrice failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Events_getEvents_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Events_getEvents_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_getEvents_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_getEvents_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Event[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Event',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Events_getEvents_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size64 = 0;
            $_etype67 = 0;
            $xfer += $input->readListBegin($_etype67, $_size64);
            for ($_i68 = 0; $_i68 < $_size64; ++$_i68)
            {
              $elem69 = null;
              $elem69 = new \TicketService\Generated\Event();
              $xfer += $elem69->read($input);
              $this->success []= $elem69;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_getEvents_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter70)
          {
            $xfer += $iter70->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_getEventsByFilter_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var string
   */
  public $category = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $stateProvince = null;
  /**
   * @var string
   */
  public $zipPostalCode = null;
  /**
   * @var string
   */
  public $countryRegionCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'stateProvince',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'zipPostalCode',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'countryRegionCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['stateProvince'])) {
        $this->stateProvince = $vals['stateProvince'];
      }
      if (isset($vals['zipPostalCode'])) {
        $this->zipPostalCode = $vals['zipPostalCode'];
      }
      if (isset($vals['countryRegionCode'])) {
        $this->countryRegionCode = $vals['countryRegionCode'];
      }
    }
  }

  public function getName() {
    return 'Events_getEventsByFilter_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stateProvince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zipPostalCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryRegionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_getEventsByFilter_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 3);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 4);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 5);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 6);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stateProvince !== null) {
      $xfer += $output->writeFieldBegin('stateProvince', TType::STRING, 7);
      $xfer += $output->writeString($this->stateProvince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zipPostalCode !== null) {
      $xfer += $output->writeFieldBegin('zipPostalCode', TType::STRING, 8);
      $xfer += $output->writeString($this->zipPostalCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryRegionCode !== null) {
      $xfer += $output->writeFieldBegin('countryRegionCode', TType::STRING, 9);
      $xfer += $output->writeString($this->countryRegionCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_getEventsByFilter_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Event[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Event',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Events_getEventsByFilter_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size71 = 0;
            $_etype74 = 0;
            $xfer += $input->readListBegin($_etype74, $_size71);
            for ($_i75 = 0; $_i75 < $_size71; ++$_i75)
            {
              $elem76 = null;
              $elem76 = new \TicketService\Generated\Event();
              $xfer += $elem76->read($input);
              $this->success []= $elem76;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_getEventsByFilter_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter77)
          {
            $xfer += $iter77->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_addEvent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $additionalInfo = null;
  /**
   * @var string
   */
  public $category = null;
  /**
   * @var int
   */
  public $minimumAge = null;
  /**
   * @var double
   */
  public $serviceFee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'additionalInfo',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'minimumAge',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'serviceFee',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['additionalInfo'])) {
        $this->additionalInfo = $vals['additionalInfo'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['minimumAge'])) {
        $this->minimumAge = $vals['minimumAge'];
      }
      if (isset($vals['serviceFee'])) {
        $this->serviceFee = $vals['serviceFee'];
      }
    }
  }

  public function getName() {
    return 'Events_addEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->additionalInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minimumAge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->serviceFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_addEvent_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 1);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 2);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 3);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->additionalInfo !== null) {
      $xfer += $output->writeFieldBegin('additionalInfo', TType::STRING, 6);
      $xfer += $output->writeString($this->additionalInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 7);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minimumAge !== null) {
      $xfer += $output->writeFieldBegin('minimumAge', TType::I32, 8);
      $xfer += $output->writeI32($this->minimumAge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFee !== null) {
      $xfer += $output->writeFieldBegin('serviceFee', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->serviceFee);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_addEvent_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Events_addEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_addEvent_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_editEvent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $additionalInfo = null;
  /**
   * @var string
   */
  public $category = null;
  /**
   * @var int
   */
  public $minimumAge = null;
  /**
   * @var double
   */
  public $serviceFee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'additionalInfo',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'minimumAge',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'serviceFee',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['additionalInfo'])) {
        $this->additionalInfo = $vals['additionalInfo'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['minimumAge'])) {
        $this->minimumAge = $vals['minimumAge'];
      }
      if (isset($vals['serviceFee'])) {
        $this->serviceFee = $vals['serviceFee'];
      }
    }
  }

  public function getName() {
    return 'Events_editEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->additionalInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minimumAge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->serviceFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_editEvent_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 2);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 3);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->additionalInfo !== null) {
      $xfer += $output->writeFieldBegin('additionalInfo', TType::STRING, 6);
      $xfer += $output->writeString($this->additionalInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 7);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minimumAge !== null) {
      $xfer += $output->writeFieldBegin('minimumAge', TType::I32, 8);
      $xfer += $output->writeI32($this->minimumAge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFee !== null) {
      $xfer += $output->writeFieldBegin('serviceFee', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->serviceFee);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_editEvent_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
    }
  }

  public function getName() {
    return 'Events_editEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_editEvent_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_activateEvent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
    }
  }

  public function getName() {
    return 'Events_activateEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_activateEvent_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_activateEvent_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
    }
  }

  public function getName() {
    return 'Events_activateEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_activateEvent_result');
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_deactivateEvent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
    }
  }

  public function getName() {
    return 'Events_deactivateEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_deactivateEvent_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_deactivateEvent_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
    }
  }

  public function getName() {
    return 'Events_deactivateEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_deactivateEvent_result');
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_removeEvent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
    }
  }

  public function getName() {
    return 'Events_removeEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_removeEvent_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_removeEvent_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
    }
  }

  public function getName() {
    return 'Events_removeEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_removeEvent_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_getTicketPricesByEvent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
    }
  }

  public function getName() {
    return 'Events_getTicketPricesByEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_getTicketPricesByEvent_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_getTicketPricesByEvent_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\TicketPrice[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\TicketPrice',
            ),
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
    }
  }

  public function getName() {
    return 'Events_getTicketPricesByEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size78 = 0;
            $_etype81 = 0;
            $xfer += $input->readListBegin($_etype81, $_size78);
            for ($_i82 = 0; $_i82 < $_size78; ++$_i82)
            {
              $elem83 = null;
              $elem83 = new \TicketService\Generated\TicketPrice();
              $xfer += $elem83->read($input);
              $this->success []= $elem83;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_getTicketPricesByEvent_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter84)
          {
            $xfer += $iter84->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_addTicketPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var string
   */
  public $saleStartTime = null;
  /**
   * @var string
   */
  public $saleEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'saleStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'saleEndTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['saleStartTime'])) {
        $this->saleStartTime = $vals['saleStartTime'];
      }
      if (isset($vals['saleEndTime'])) {
        $this->saleEndTime = $vals['saleEndTime'];
      }
    }
  }

  public function getName() {
    return 'Events_addTicketPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_addTicketPrice_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 4);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 5);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 6);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleStartTime !== null) {
      $xfer += $output->writeFieldBegin('saleStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->saleStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleEndTime !== null) {
      $xfer += $output->writeFieldBegin('saleEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->saleEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_addTicketPrice_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;
  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        2 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_addTicketPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_addTicketPrice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 2);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_editTicketPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketPriceId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var string
   */
  public $saleStartTime = null;
  /**
   * @var string
   */
  public $saleEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketPriceId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'saleStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'saleEndTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketPriceId'])) {
        $this->ticketPriceId = $vals['ticketPriceId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['saleStartTime'])) {
        $this->saleStartTime = $vals['saleStartTime'];
      }
      if (isset($vals['saleEndTime'])) {
        $this->saleEndTime = $vals['saleEndTime'];
      }
    }
  }

  public function getName() {
    return 'Events_editTicketPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketPriceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_editTicketPrice_args');
    if ($this->ticketPriceId !== null) {
      $xfer += $output->writeFieldBegin('ticketPriceId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketPriceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 4);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 5);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 6);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleStartTime !== null) {
      $xfer += $output->writeFieldBegin('saleStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->saleStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleEndTime !== null) {
      $xfer += $output->writeFieldBegin('saleEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->saleEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_editTicketPrice_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_editTicketPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_editTicketPrice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 1);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_addTicketPriceForGeneralAdmission_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $maxAmount = null;
  /**
   * @var string
   */
  public $saleStartTime = null;
  /**
   * @var string
   */
  public $saleEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'maxAmount',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'saleStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'saleEndTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['maxAmount'])) {
        $this->maxAmount = $vals['maxAmount'];
      }
      if (isset($vals['saleStartTime'])) {
        $this->saleStartTime = $vals['saleStartTime'];
      }
      if (isset($vals['saleEndTime'])) {
        $this->saleEndTime = $vals['saleEndTime'];
      }
    }
  }

  public function getName() {
    return 'Events_addTicketPriceForGeneralAdmission_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_addTicketPriceForGeneralAdmission_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I64, 1);
      $xfer += $output->writeI64($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 4);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 5);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxAmount !== null) {
      $xfer += $output->writeFieldBegin('maxAmount', TType::I32, 6);
      $xfer += $output->writeI32($this->maxAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleStartTime !== null) {
      $xfer += $output->writeFieldBegin('saleStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->saleStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleEndTime !== null) {
      $xfer += $output->writeFieldBegin('saleEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->saleEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_addTicketPriceForGeneralAdmission_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidEvent
   */
  public $invalidEvent = null;
  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'invalidEvent',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidEvent',
          ),
        2 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidEvent'])) {
        $this->invalidEvent = $vals['invalidEvent'];
      }
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_addTicketPriceForGeneralAdmission_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidEvent = new \TicketService\Generated\InvalidEvent();
            $xfer += $this->invalidEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_addTicketPriceForGeneralAdmission_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidEvent !== null) {
      $xfer += $output->writeFieldBegin('invalidEvent', TType::STRUCT, 1);
      $xfer += $this->invalidEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 2);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_editTicketPriceForGeneralAdmission_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketPriceId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $maxAmount = null;
  /**
   * @var string
   */
  public $saleStartTime = null;
  /**
   * @var string
   */
  public $saleEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketPriceId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'maxAmount',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'saleStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'saleEndTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketPriceId'])) {
        $this->ticketPriceId = $vals['ticketPriceId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['maxAmount'])) {
        $this->maxAmount = $vals['maxAmount'];
      }
      if (isset($vals['saleStartTime'])) {
        $this->saleStartTime = $vals['saleStartTime'];
      }
      if (isset($vals['saleEndTime'])) {
        $this->saleEndTime = $vals['saleEndTime'];
      }
    }
  }

  public function getName() {
    return 'Events_editTicketPriceForGeneralAdmission_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketPriceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_editTicketPriceForGeneralAdmission_args');
    if ($this->ticketPriceId !== null) {
      $xfer += $output->writeFieldBegin('ticketPriceId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketPriceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 4);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 5);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxAmount !== null) {
      $xfer += $output->writeFieldBegin('maxAmount', TType::I32, 6);
      $xfer += $output->writeI32($this->maxAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleStartTime !== null) {
      $xfer += $output->writeFieldBegin('saleStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->saleStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleEndTime !== null) {
      $xfer += $output->writeFieldBegin('saleEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->saleEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_editTicketPriceForGeneralAdmission_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_editTicketPriceForGeneralAdmission_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_editTicketPriceForGeneralAdmission_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 1);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_activateTicketPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketPriceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketPriceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketPriceId'])) {
        $this->ticketPriceId = $vals['ticketPriceId'];
      }
    }
  }

  public function getName() {
    return 'Events_activateTicketPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketPriceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_activateTicketPrice_args');
    if ($this->ticketPriceId !== null) {
      $xfer += $output->writeFieldBegin('ticketPriceId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketPriceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_activateTicketPrice_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_activateTicketPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_activateTicketPrice_result');
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 1);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_deactivateTicketPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketPriceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketPriceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketPriceId'])) {
        $this->ticketPriceId = $vals['ticketPriceId'];
      }
    }
  }

  public function getName() {
    return 'Events_deactivateTicketPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketPriceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_deactivateTicketPrice_args');
    if ($this->ticketPriceId !== null) {
      $xfer += $output->writeFieldBegin('ticketPriceId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketPriceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_deactivateTicketPrice_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_deactivateTicketPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_deactivateTicketPrice_result');
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 1);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_removeTicketPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ticketPriceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketPriceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ticketPriceId'])) {
        $this->ticketPriceId = $vals['ticketPriceId'];
      }
    }
  }

  public function getName() {
    return 'Events_removeTicketPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ticketPriceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_removeTicketPrice_args');
    if ($this->ticketPriceId !== null) {
      $xfer += $output->writeFieldBegin('ticketPriceId', TType::I64, 1);
      $xfer += $output->writeI64($this->ticketPriceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Events_removeTicketPrice_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidTicketPrice
   */
  public $invalidTicketPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'invalidTicketPrice',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidTicketPrice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidTicketPrice'])) {
        $this->invalidTicketPrice = $vals['invalidTicketPrice'];
      }
    }
  }

  public function getName() {
    return 'Events_removeTicketPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidTicketPrice = new \TicketService\Generated\InvalidTicketPrice();
            $xfer += $this->invalidTicketPrice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Events_removeTicketPrice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidTicketPrice !== null) {
      $xfer += $output->writeFieldBegin('invalidTicketPrice', TType::STRUCT, 1);
      $xfer += $this->invalidTicketPrice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


