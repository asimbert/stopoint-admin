<?php
namespace TicketService\Generated;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface VenuesIf {
  /**
   * @return \TicketService\Generated\Venue[]
   */
  public function getVenues();
  /**
   * @return \TicketService\Generated\Venue[]
   */
  public function getInactiveVenues();
  /**
   * @param string $city
   * @param string $stateProvince
   * @param string $zipPostalCode
   * @param string $countryRegionCode
   * @return \TicketService\Generated\Venue[]
   */
  public function getVenuesByFilter($city, $stateProvince, $zipPostalCode, $countryRegionCode);
  /**
   * @param string $name
   * @param string $description
   * @param \TicketService\Generated\Address $address
   * @param double $serviceFee
   * @return int
   * @throws \TicketService\Generated\InvalidVenue
   * @throws \TicketService\Generated\InvalidAddress
   */
  public function addVenue($name, $description, \TicketService\Generated\Address $address, $serviceFee);
  /**
   * @param int $venueId
   * @param string $name
   * @param string $description
   * @param \TicketService\Generated\Address $address
   * @param double $serviceFee
   * @throws \TicketService\Generated\InvalidVenue
   * @throws \TicketService\Generated\InvalidAddress
   */
  public function editVenue($venueId, $name, $description, \TicketService\Generated\Address $address, $serviceFee);
  /**
   * @param int $venueId
   * @throws \TicketService\Generated\InvalidVenue
   */
  public function activateVenue($venueId);
  /**
   * @param int $venueId
   * @throws \TicketService\Generated\InvalidVenue
   */
  public function deactivateVenue($venueId);
  /**
   * @param int $venueId
   * @throws \TicketService\Generated\InvalidVenue
   */
  public function removeVenue($venueId);
  /**
   * @param int $venueId
   * @return \TicketService\Generated\Space[]
   * @throws \TicketService\Generated\InvalidVenue
   */
  public function getSpacesByVenue($venueId);
  /**
   * @param int $venueId
   * @return \TicketService\Generated\Space[]
   * @throws \TicketService\Generated\InvalidVenue
   */
  public function getInactiveSpacesByVenue($venueId);
  /**
   * @param int $venueId
   * @param string $name
   * @param int $maxCapacity
   * @param int $reservationType
   * @return int
   * @throws \TicketService\Generated\InvalidVenue
   */
  public function addSpace($venueId, $name, $maxCapacity, $reservationType);
  /**
   * @param int $spaceId
   * @param string $name
   * @param int $maxCapacity
   * @param int $reservationType
   * @throws \TicketService\Generated\InvalidSpace
   */
  public function editSpace($spaceId, $name, $maxCapacity, $reservationType);
  /**
   * @param int $spaceId
   * @throws \TicketService\Generated\InvalidSpace
   */
  public function activateSpace($spaceId);
  /**
   * @param int $spaceId
   * @throws \TicketService\Generated\InvalidSpace
   */
  public function deactivateSpace($spaceId);
  /**
   * @param int $spaceId
   * @throws \TicketService\Generated\InvalidSpace
   */
  public function removeSpace($spaceId);
  /**
   * @param int $spaceId
   * @return \TicketService\Generated\Section[]
   * @throws \TicketService\Generated\InvalidSpace
   */
  public function getSectionsBySpace($spaceId);
  /**
   * @param int $sectionId
   * @param int $spaceId
   * @param string $name
   * @param bool $generalAdmission
   * @param int $maxCapacity
   * @param int $seatPreference
   * @throws \TicketService\Generated\InvalidSpace
   * @throws \TicketService\Generated\InvalidSection
   */
  public function addSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference);
  /**
   * @param int $sectionId
   * @param int $spaceId
   * @param string $name
   * @param bool $generalAdmission
   * @param int $maxCapacity
   * @param int $seatPreference
   * @throws \TicketService\Generated\InvalidSection
   */
  public function editSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference);
  /**
   * @param int $sectionId
   * @param int $spaceId
   * @throws \TicketService\Generated\InvalidSection
   */
  public function removeSection($sectionId, $spaceId);
  /**
   * @param int $sectionId
   * @param int $spaceId
   * @return \TicketService\Generated\Row[]
   * @throws \TicketService\Generated\InvalidSection
   */
  public function getRowsBySection($sectionId, $spaceId);
  /**
   * @param int $rowId
   * @param int $spaceId
   * @param int $sectionId
   * @param string $name
   * @param bool $generalAdmission
   * @param int $maxCapacity
   * @param int $seatPreference
   * @throws \TicketService\Generated\InvalidSection
   * @throws \TicketService\Generated\InvalidRow
   */
  public function addRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference);
  /**
   * @param int $rowId
   * @param int $spaceId
   * @param int $sectionId
   * @param string $name
   * @param bool $generalAdmission
   * @param int $maxCapacity
   * @param int $seatPreference
   * @throws \TicketService\Generated\InvalidRow
   */
  public function editRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference);
  /**
   * @param int $rowId
   * @param int $spaceId
   * @param int $sectionId
   * @throws \TicketService\Generated\InvalidRow
   */
  public function removeRow($rowId, $spaceId, $sectionId);
  /**
   * @param int $rowId
   * @param int $spaceId
   * @param int $sectionId
   * @return \TicketService\Generated\Seat[]
   * @throws \TicketService\Generated\InvalidRow
   */
  public function getSeatsByRow($rowId, $spaceId, $sectionId);
  /**
   * @param int $seatId
   * @param int $spaceId
   * @param int $sectionId
   * @param int $rowId
   * @param string $name
   * @param int $seatPreference
   * @throws \TicketService\Generated\InvalidRow
   * @throws \TicketService\Generated\InvalidSeat
   */
  public function addSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference);
  /**
   * @param int $seatId
   * @param int $spaceId
   * @param int $sectionId
   * @param int $rowId
   * @param string $name
   * @param int $seatPreference
   * @throws \TicketService\Generated\InvalidSeat
   */
  public function editSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference);
  /**
   * @param int $seatId
   * @param int $spaceId
   * @param int $sectionId
   * @param int $rowId
   * @throws \TicketService\Generated\InvalidSeat
   */
  public function removeSeat($seatId, $spaceId, $sectionId, $rowId);
}

class VenuesClient implements \TicketService\Generated\VenuesIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getVenues()
  {
    $this->send_getVenues();
    return $this->recv_getVenues();
  }

  public function send_getVenues()
  {
    $args = new \TicketService\Generated\Venues_getVenues_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVenues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVenues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVenues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getVenues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getVenues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVenues failed: unknown result");
  }

  public function getInactiveVenues()
  {
    $this->send_getInactiveVenues();
    return $this->recv_getInactiveVenues();
  }

  public function send_getInactiveVenues()
  {
    $args = new \TicketService\Generated\Venues_getInactiveVenues_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInactiveVenues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInactiveVenues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInactiveVenues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getInactiveVenues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getInactiveVenues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getInactiveVenues failed: unknown result");
  }

  public function getVenuesByFilter($city, $stateProvince, $zipPostalCode, $countryRegionCode)
  {
    $this->send_getVenuesByFilter($city, $stateProvince, $zipPostalCode, $countryRegionCode);
    return $this->recv_getVenuesByFilter();
  }

  public function send_getVenuesByFilter($city, $stateProvince, $zipPostalCode, $countryRegionCode)
  {
    $args = new \TicketService\Generated\Venues_getVenuesByFilter_args();
    $args->city = $city;
    $args->stateProvince = $stateProvince;
    $args->zipPostalCode = $zipPostalCode;
    $args->countryRegionCode = $countryRegionCode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVenuesByFilter', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVenuesByFilter', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVenuesByFilter()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getVenuesByFilter_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getVenuesByFilter_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVenuesByFilter failed: unknown result");
  }

  public function addVenue($name, $description, \TicketService\Generated\Address $address, $serviceFee)
  {
    $this->send_addVenue($name, $description, $address, $serviceFee);
    return $this->recv_addVenue();
  }

  public function send_addVenue($name, $description, \TicketService\Generated\Address $address, $serviceFee)
  {
    $args = new \TicketService\Generated\Venues_addVenue_args();
    $args->name = $name;
    $args->description = $description;
    $args->address = $address;
    $args->serviceFee = $serviceFee;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_addVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_addVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    if ($result->invalidAddress !== null) {
      throw $result->invalidAddress;
    }
    throw new \Exception("addVenue failed: unknown result");
  }

  public function editVenue($venueId, $name, $description, \TicketService\Generated\Address $address, $serviceFee)
  {
    $this->send_editVenue($venueId, $name, $description, $address, $serviceFee);
    $this->recv_editVenue();
  }

  public function send_editVenue($venueId, $name, $description, \TicketService\Generated\Address $address, $serviceFee)
  {
    $args = new \TicketService\Generated\Venues_editVenue_args();
    $args->venueId = $venueId;
    $args->name = $name;
    $args->description = $description;
    $args->address = $address;
    $args->serviceFee = $serviceFee;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_editVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_editVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    if ($result->invalidAddress !== null) {
      throw $result->invalidAddress;
    }
    return;
  }

  public function activateVenue($venueId)
  {
    $this->send_activateVenue($venueId);
    $this->recv_activateVenue();
  }

  public function send_activateVenue($venueId)
  {
    $args = new \TicketService\Generated\Venues_activateVenue_args();
    $args->venueId = $venueId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activateVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activateVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activateVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_activateVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_activateVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    return;
  }

  public function deactivateVenue($venueId)
  {
    $this->send_deactivateVenue($venueId);
    $this->recv_deactivateVenue();
  }

  public function send_deactivateVenue($venueId)
  {
    $args = new \TicketService\Generated\Venues_deactivateVenue_args();
    $args->venueId = $venueId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deactivateVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deactivateVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deactivateVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_deactivateVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_deactivateVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    return;
  }

  public function removeVenue($venueId)
  {
    $this->send_removeVenue($venueId);
    $this->recv_removeVenue();
  }

  public function send_removeVenue($venueId)
  {
    $args = new \TicketService\Generated\Venues_removeVenue_args();
    $args->venueId = $venueId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_removeVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_removeVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    return;
  }

  public function getSpacesByVenue($venueId)
  {
    $this->send_getSpacesByVenue($venueId);
    return $this->recv_getSpacesByVenue();
  }

  public function send_getSpacesByVenue($venueId)
  {
    $args = new \TicketService\Generated\Venues_getSpacesByVenue_args();
    $args->venueId = $venueId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSpacesByVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSpacesByVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSpacesByVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getSpacesByVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getSpacesByVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    throw new \Exception("getSpacesByVenue failed: unknown result");
  }

  public function getInactiveSpacesByVenue($venueId)
  {
    $this->send_getInactiveSpacesByVenue($venueId);
    return $this->recv_getInactiveSpacesByVenue();
  }

  public function send_getInactiveSpacesByVenue($venueId)
  {
    $args = new \TicketService\Generated\Venues_getInactiveSpacesByVenue_args();
    $args->venueId = $venueId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInactiveSpacesByVenue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInactiveSpacesByVenue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInactiveSpacesByVenue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getInactiveSpacesByVenue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getInactiveSpacesByVenue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    throw new \Exception("getInactiveSpacesByVenue failed: unknown result");
  }

  public function addSpace($venueId, $name, $maxCapacity, $reservationType)
  {
    $this->send_addSpace($venueId, $name, $maxCapacity, $reservationType);
    return $this->recv_addSpace();
  }

  public function send_addSpace($venueId, $name, $maxCapacity, $reservationType)
  {
    $args = new \TicketService\Generated\Venues_addSpace_args();
    $args->venueId = $venueId;
    $args->name = $name;
    $args->maxCapacity = $maxCapacity;
    $args->reservationType = $reservationType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addSpace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addSpace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addSpace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_addSpace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_addSpace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidVenue !== null) {
      throw $result->invalidVenue;
    }
    throw new \Exception("addSpace failed: unknown result");
  }

  public function editSpace($spaceId, $name, $maxCapacity, $reservationType)
  {
    $this->send_editSpace($spaceId, $name, $maxCapacity, $reservationType);
    $this->recv_editSpace();
  }

  public function send_editSpace($spaceId, $name, $maxCapacity, $reservationType)
  {
    $args = new \TicketService\Generated\Venues_editSpace_args();
    $args->spaceId = $spaceId;
    $args->name = $name;
    $args->maxCapacity = $maxCapacity;
    $args->reservationType = $reservationType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editSpace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editSpace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editSpace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_editSpace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_editSpace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSpace !== null) {
      throw $result->invalidSpace;
    }
    return;
  }

  public function activateSpace($spaceId)
  {
    $this->send_activateSpace($spaceId);
    $this->recv_activateSpace();
  }

  public function send_activateSpace($spaceId)
  {
    $args = new \TicketService\Generated\Venues_activateSpace_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activateSpace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activateSpace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activateSpace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_activateSpace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_activateSpace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSpace !== null) {
      throw $result->invalidSpace;
    }
    return;
  }

  public function deactivateSpace($spaceId)
  {
    $this->send_deactivateSpace($spaceId);
    $this->recv_deactivateSpace();
  }

  public function send_deactivateSpace($spaceId)
  {
    $args = new \TicketService\Generated\Venues_deactivateSpace_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deactivateSpace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deactivateSpace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deactivateSpace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_deactivateSpace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_deactivateSpace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSpace !== null) {
      throw $result->invalidSpace;
    }
    return;
  }

  public function removeSpace($spaceId)
  {
    $this->send_removeSpace($spaceId);
    $this->recv_removeSpace();
  }

  public function send_removeSpace($spaceId)
  {
    $args = new \TicketService\Generated\Venues_removeSpace_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeSpace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeSpace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeSpace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_removeSpace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_removeSpace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSpace !== null) {
      throw $result->invalidSpace;
    }
    return;
  }

  public function getSectionsBySpace($spaceId)
  {
    $this->send_getSectionsBySpace($spaceId);
    return $this->recv_getSectionsBySpace();
  }

  public function send_getSectionsBySpace($spaceId)
  {
    $args = new \TicketService\Generated\Venues_getSectionsBySpace_args();
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSectionsBySpace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSectionsBySpace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSectionsBySpace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getSectionsBySpace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getSectionsBySpace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidSpace !== null) {
      throw $result->invalidSpace;
    }
    throw new \Exception("getSectionsBySpace failed: unknown result");
  }

  public function addSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $this->send_addSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference);
    $this->recv_addSection();
  }

  public function send_addSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $args = new \TicketService\Generated\Venues_addSection_args();
    $args->sectionId = $sectionId;
    $args->spaceId = $spaceId;
    $args->name = $name;
    $args->generalAdmission = $generalAdmission;
    $args->maxCapacity = $maxCapacity;
    $args->seatPreference = $seatPreference;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addSection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addSection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addSection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_addSection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_addSection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSpace !== null) {
      throw $result->invalidSpace;
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    return;
  }

  public function editSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $this->send_editSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference);
    $this->recv_editSection();
  }

  public function send_editSection($sectionId, $spaceId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $args = new \TicketService\Generated\Venues_editSection_args();
    $args->sectionId = $sectionId;
    $args->spaceId = $spaceId;
    $args->name = $name;
    $args->generalAdmission = $generalAdmission;
    $args->maxCapacity = $maxCapacity;
    $args->seatPreference = $seatPreference;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editSection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editSection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editSection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_editSection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_editSection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    return;
  }

  public function removeSection($sectionId, $spaceId)
  {
    $this->send_removeSection($sectionId, $spaceId);
    $this->recv_removeSection();
  }

  public function send_removeSection($sectionId, $spaceId)
  {
    $args = new \TicketService\Generated\Venues_removeSection_args();
    $args->sectionId = $sectionId;
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeSection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeSection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeSection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_removeSection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_removeSection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    return;
  }

  public function getRowsBySection($sectionId, $spaceId)
  {
    $this->send_getRowsBySection($sectionId, $spaceId);
    return $this->recv_getRowsBySection();
  }

  public function send_getRowsBySection($sectionId, $spaceId)
  {
    $args = new \TicketService\Generated\Venues_getRowsBySection_args();
    $args->sectionId = $sectionId;
    $args->spaceId = $spaceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRowsBySection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRowsBySection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRowsBySection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getRowsBySection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getRowsBySection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    throw new \Exception("getRowsBySection failed: unknown result");
  }

  public function addRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $this->send_addRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference);
    $this->recv_addRow();
  }

  public function send_addRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $args = new \TicketService\Generated\Venues_addRow_args();
    $args->rowId = $rowId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $args->name = $name;
    $args->generalAdmission = $generalAdmission;
    $args->maxCapacity = $maxCapacity;
    $args->seatPreference = $seatPreference;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addRow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_addRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_addRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSection !== null) {
      throw $result->invalidSection;
    }
    if ($result->invalidRow !== null) {
      throw $result->invalidRow;
    }
    return;
  }

  public function editRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $this->send_editRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference);
    $this->recv_editRow();
  }

  public function send_editRow($rowId, $spaceId, $sectionId, $name, $generalAdmission, $maxCapacity, $seatPreference)
  {
    $args = new \TicketService\Generated\Venues_editRow_args();
    $args->rowId = $rowId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $args->name = $name;
    $args->generalAdmission = $generalAdmission;
    $args->maxCapacity = $maxCapacity;
    $args->seatPreference = $seatPreference;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editRow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_editRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_editRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidRow !== null) {
      throw $result->invalidRow;
    }
    return;
  }

  public function removeRow($rowId, $spaceId, $sectionId)
  {
    $this->send_removeRow($rowId, $spaceId, $sectionId);
    $this->recv_removeRow();
  }

  public function send_removeRow($rowId, $spaceId, $sectionId)
  {
    $args = new \TicketService\Generated\Venues_removeRow_args();
    $args->rowId = $rowId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeRow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_removeRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_removeRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidRow !== null) {
      throw $result->invalidRow;
    }
    return;
  }

  public function getSeatsByRow($rowId, $spaceId, $sectionId)
  {
    $this->send_getSeatsByRow($rowId, $spaceId, $sectionId);
    return $this->recv_getSeatsByRow();
  }

  public function send_getSeatsByRow($rowId, $spaceId, $sectionId)
  {
    $args = new \TicketService\Generated\Venues_getSeatsByRow_args();
    $args->rowId = $rowId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSeatsByRow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSeatsByRow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSeatsByRow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_getSeatsByRow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_getSeatsByRow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->invalidRow !== null) {
      throw $result->invalidRow;
    }
    throw new \Exception("getSeatsByRow failed: unknown result");
  }

  public function addSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference)
  {
    $this->send_addSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference);
    $this->recv_addSeat();
  }

  public function send_addSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference)
  {
    $args = new \TicketService\Generated\Venues_addSeat_args();
    $args->seatId = $seatId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->name = $name;
    $args->seatPreference = $seatPreference;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addSeat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addSeat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addSeat()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_addSeat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_addSeat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidRow !== null) {
      throw $result->invalidRow;
    }
    if ($result->invalidSeat !== null) {
      throw $result->invalidSeat;
    }
    return;
  }

  public function editSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference)
  {
    $this->send_editSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference);
    $this->recv_editSeat();
  }

  public function send_editSeat($seatId, $spaceId, $sectionId, $rowId, $name, $seatPreference)
  {
    $args = new \TicketService\Generated\Venues_editSeat_args();
    $args->seatId = $seatId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $args->name = $name;
    $args->seatPreference = $seatPreference;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editSeat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editSeat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editSeat()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_editSeat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_editSeat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSeat !== null) {
      throw $result->invalidSeat;
    }
    return;
  }

  public function removeSeat($seatId, $spaceId, $sectionId, $rowId)
  {
    $this->send_removeSeat($seatId, $spaceId, $sectionId, $rowId);
    $this->recv_removeSeat();
  }

  public function send_removeSeat($seatId, $spaceId, $sectionId, $rowId)
  {
    $args = new \TicketService\Generated\Venues_removeSeat_args();
    $args->seatId = $seatId;
    $args->spaceId = $spaceId;
    $args->sectionId = $sectionId;
    $args->rowId = $rowId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeSeat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeSeat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeSeat()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TicketService\Generated\Venues_removeSeat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TicketService\Generated\Venues_removeSeat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->invalidSeat !== null) {
      throw $result->invalidSeat;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Venues_getVenues_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Venues_getVenues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getVenues_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getVenues_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Venue[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Venue',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Venues_getVenues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \TicketService\Generated\Venue();
              $xfer += $elem5->read($input);
              if (is_scalar($elem5)) {
                $this->success[$elem5] = true;
              } else {
                $this->success []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getVenues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter6 => $iter7)
          {
            if (is_scalar($iter7)) {
            $xfer += $iter6->write($output);
            } else {
            $xfer += $iter7->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getInactiveVenues_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Venues_getInactiveVenues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getInactiveVenues_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getInactiveVenues_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Venue[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Venue',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Venues_getInactiveVenues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size8 = 0;
            $_etype11 = 0;
            $xfer += $input->readSetBegin($_etype11, $_size8);
            for ($_i12 = 0; $_i12 < $_size8; ++$_i12)
            {
              $elem13 = null;
              $elem13 = new \TicketService\Generated\Venue();
              $xfer += $elem13->read($input);
              if (is_scalar($elem13)) {
                $this->success[$elem13] = true;
              } else {
                $this->success []= $elem13;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getInactiveVenues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter14 => $iter15)
          {
            if (is_scalar($iter15)) {
            $xfer += $iter14->write($output);
            } else {
            $xfer += $iter15->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getVenuesByFilter_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $city = null;
  /**
   * @var string
   */
  public $stateProvince = null;
  /**
   * @var string
   */
  public $zipPostalCode = null;
  /**
   * @var string
   */
  public $countryRegionCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'stateProvince',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'zipPostalCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'countryRegionCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['stateProvince'])) {
        $this->stateProvince = $vals['stateProvince'];
      }
      if (isset($vals['zipPostalCode'])) {
        $this->zipPostalCode = $vals['zipPostalCode'];
      }
      if (isset($vals['countryRegionCode'])) {
        $this->countryRegionCode = $vals['countryRegionCode'];
      }
    }
  }

  public function getName() {
    return 'Venues_getVenuesByFilter_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stateProvince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zipPostalCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryRegionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getVenuesByFilter_args');
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 1);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stateProvince !== null) {
      $xfer += $output->writeFieldBegin('stateProvince', TType::STRING, 2);
      $xfer += $output->writeString($this->stateProvince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zipPostalCode !== null) {
      $xfer += $output->writeFieldBegin('zipPostalCode', TType::STRING, 3);
      $xfer += $output->writeString($this->zipPostalCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryRegionCode !== null) {
      $xfer += $output->writeFieldBegin('countryRegionCode', TType::STRING, 4);
      $xfer += $output->writeString($this->countryRegionCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getVenuesByFilter_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Venue[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Venue',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Venues_getVenuesByFilter_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readSetBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new \TicketService\Generated\Venue();
              $xfer += $elem21->read($input);
              if (is_scalar($elem21)) {
                $this->success[$elem21] = true;
              } else {
                $this->success []= $elem21;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getVenuesByFilter_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter22 => $iter23)
          {
            if (is_scalar($iter23)) {
            $xfer += $iter22->write($output);
            } else {
            $xfer += $iter23->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addVenue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var \TicketService\Generated\Address
   */
  public $address = null;
  /**
   * @var double
   */
  public $serviceFee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\Address',
          ),
        4 => array(
          'var' => 'serviceFee',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['serviceFee'])) {
        $this->serviceFee = $vals['serviceFee'];
      }
    }
  }

  public function getName() {
    return 'Venues_addVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->address = new \TicketService\Generated\Address();
            $xfer += $this->address->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->serviceFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addVenue_args');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      if (!is_object($this->address)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('address', TType::STRUCT, 3);
      $xfer += $this->address->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFee !== null) {
      $xfer += $output->writeFieldBegin('serviceFee', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->serviceFee);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addVenue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;
  /**
   * @var \TicketService\Generated\InvalidAddress
   */
  public $invalidAddress = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        2 => array(
          'var' => 'invalidAddress',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidAddress',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
      if (isset($vals['invalidAddress'])) {
        $this->invalidAddress = $vals['invalidAddress'];
      }
    }
  }

  public function getName() {
    return 'Venues_addVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidAddress = new \TicketService\Generated\InvalidAddress();
            $xfer += $this->invalidAddress->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addVenue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidAddress !== null) {
      $xfer += $output->writeFieldBegin('invalidAddress', TType::STRUCT, 2);
      $xfer += $this->invalidAddress->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editVenue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var \TicketService\Generated\Address
   */
  public $address = null;
  /**
   * @var double
   */
  public $serviceFee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'address',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\Address',
          ),
        5 => array(
          'var' => 'serviceFee',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['serviceFee'])) {
        $this->serviceFee = $vals['serviceFee'];
      }
    }
  }

  public function getName() {
    return 'Venues_editVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->address = new \TicketService\Generated\Address();
            $xfer += $this->address->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->serviceFee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editVenue_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 3);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      if (!is_object($this->address)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('address', TType::STRUCT, 4);
      $xfer += $this->address->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceFee !== null) {
      $xfer += $output->writeFieldBegin('serviceFee', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->serviceFee);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editVenue_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;
  /**
   * @var \TicketService\Generated\InvalidAddress
   */
  public $invalidAddress = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        2 => array(
          'var' => 'invalidAddress',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidAddress',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
      if (isset($vals['invalidAddress'])) {
        $this->invalidAddress = $vals['invalidAddress'];
      }
    }
  }

  public function getName() {
    return 'Venues_editVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidAddress = new \TicketService\Generated\InvalidAddress();
            $xfer += $this->invalidAddress->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editVenue_result');
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidAddress !== null) {
      $xfer += $output->writeFieldBegin('invalidAddress', TType::STRUCT, 2);
      $xfer += $this->invalidAddress->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_activateVenue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
    }
  }

  public function getName() {
    return 'Venues_activateVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_activateVenue_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_activateVenue_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
    }
  }

  public function getName() {
    return 'Venues_activateVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_activateVenue_result');
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_deactivateVenue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
    }
  }

  public function getName() {
    return 'Venues_deactivateVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_deactivateVenue_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_deactivateVenue_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
    }
  }

  public function getName() {
    return 'Venues_deactivateVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_deactivateVenue_result');
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeVenue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeVenue_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeVenue_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeVenue_result');
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getSpacesByVenue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
    }
  }

  public function getName() {
    return 'Venues_getSpacesByVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getSpacesByVenue_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getSpacesByVenue_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Space[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Space',
            ),
          ),
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
    }
  }

  public function getName() {
    return 'Venues_getSpacesByVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readSetBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $elem29 = new \TicketService\Generated\Space();
              $xfer += $elem29->read($input);
              if (is_scalar($elem29)) {
                $this->success[$elem29] = true;
              } else {
                $this->success []= $elem29;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getSpacesByVenue_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter30 => $iter31)
          {
            if (is_scalar($iter31)) {
            $xfer += $iter30->write($output);
            } else {
            $xfer += $iter31->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getInactiveSpacesByVenue_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
    }
  }

  public function getName() {
    return 'Venues_getInactiveSpacesByVenue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getInactiveSpacesByVenue_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getInactiveSpacesByVenue_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Space[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Space',
            ),
          ),
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
    }
  }

  public function getName() {
    return 'Venues_getInactiveSpacesByVenue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readSetBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $elem37 = new \TicketService\Generated\Space();
              $xfer += $elem37->read($input);
              if (is_scalar($elem37)) {
                $this->success[$elem37] = true;
              } else {
                $this->success []= $elem37;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getInactiveSpacesByVenue_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter38 => $iter39)
          {
            if (is_scalar($iter39)) {
            $xfer += $iter38->write($output);
            } else {
            $xfer += $iter39->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addSpace_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $venueId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $reservationType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'venueId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reservationType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['venueId'])) {
        $this->venueId = $vals['venueId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['reservationType'])) {
        $this->reservationType = $vals['reservationType'];
      }
    }
  }

  public function getName() {
    return 'Venues_addSpace_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->venueId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reservationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addSpace_args');
    if ($this->venueId !== null) {
      $xfer += $output->writeFieldBegin('venueId', TType::I64, 1);
      $xfer += $output->writeI64($this->venueId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 3);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationType !== null) {
      $xfer += $output->writeFieldBegin('reservationType', TType::I32, 4);
      $xfer += $output->writeI32($this->reservationType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addSpace_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidVenue
   */
  public $invalidVenue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'invalidVenue',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidVenue',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidVenue'])) {
        $this->invalidVenue = $vals['invalidVenue'];
      }
    }
  }

  public function getName() {
    return 'Venues_addSpace_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidVenue = new \TicketService\Generated\InvalidVenue();
            $xfer += $this->invalidVenue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addSpace_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidVenue !== null) {
      $xfer += $output->writeFieldBegin('invalidVenue', TType::STRUCT, 1);
      $xfer += $this->invalidVenue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editSpace_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $reservationType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reservationType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['reservationType'])) {
        $this->reservationType = $vals['reservationType'];
      }
    }
  }

  public function getName() {
    return 'Venues_editSpace_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reservationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editSpace_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 1);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 3);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationType !== null) {
      $xfer += $output->writeFieldBegin('reservationType', TType::I32, 4);
      $xfer += $output->writeI32($this->reservationType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editSpace_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSpace
   */
  public $invalidSpace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSpace',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSpace',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSpace'])) {
        $this->invalidSpace = $vals['invalidSpace'];
      }
    }
  }

  public function getName() {
    return 'Venues_editSpace_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSpace = new \TicketService\Generated\InvalidSpace();
            $xfer += $this->invalidSpace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editSpace_result');
    if ($this->invalidSpace !== null) {
      $xfer += $output->writeFieldBegin('invalidSpace', TType::STRUCT, 1);
      $xfer += $this->invalidSpace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_activateSpace_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'Venues_activateSpace_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_activateSpace_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 1);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_activateSpace_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSpace
   */
  public $invalidSpace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSpace',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSpace',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSpace'])) {
        $this->invalidSpace = $vals['invalidSpace'];
      }
    }
  }

  public function getName() {
    return 'Venues_activateSpace_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSpace = new \TicketService\Generated\InvalidSpace();
            $xfer += $this->invalidSpace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_activateSpace_result');
    if ($this->invalidSpace !== null) {
      $xfer += $output->writeFieldBegin('invalidSpace', TType::STRUCT, 1);
      $xfer += $this->invalidSpace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_deactivateSpace_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'Venues_deactivateSpace_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_deactivateSpace_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 1);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_deactivateSpace_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSpace
   */
  public $invalidSpace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSpace',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSpace',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSpace'])) {
        $this->invalidSpace = $vals['invalidSpace'];
      }
    }
  }

  public function getName() {
    return 'Venues_deactivateSpace_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSpace = new \TicketService\Generated\InvalidSpace();
            $xfer += $this->invalidSpace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_deactivateSpace_result');
    if ($this->invalidSpace !== null) {
      $xfer += $output->writeFieldBegin('invalidSpace', TType::STRUCT, 1);
      $xfer += $this->invalidSpace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeSpace_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeSpace_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeSpace_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 1);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeSpace_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSpace
   */
  public $invalidSpace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSpace',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSpace',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSpace'])) {
        $this->invalidSpace = $vals['invalidSpace'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeSpace_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSpace = new \TicketService\Generated\InvalidSpace();
            $xfer += $this->invalidSpace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeSpace_result');
    if ($this->invalidSpace !== null) {
      $xfer += $output->writeFieldBegin('invalidSpace', TType::STRUCT, 1);
      $xfer += $this->invalidSpace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getSectionsBySpace_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'Venues_getSectionsBySpace_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getSectionsBySpace_args');
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 1);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getSectionsBySpace_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Section[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidSpace
   */
  public $invalidSpace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Section',
            ),
          ),
        1 => array(
          'var' => 'invalidSpace',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSpace',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidSpace'])) {
        $this->invalidSpace = $vals['invalidSpace'];
      }
    }
  }

  public function getName() {
    return 'Venues_getSectionsBySpace_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size40 = 0;
            $_etype43 = 0;
            $xfer += $input->readSetBegin($_etype43, $_size40);
            for ($_i44 = 0; $_i44 < $_size40; ++$_i44)
            {
              $elem45 = null;
              $elem45 = new \TicketService\Generated\Section();
              $xfer += $elem45->read($input);
              if (is_scalar($elem45)) {
                $this->success[$elem45] = true;
              } else {
                $this->success []= $elem45;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSpace = new \TicketService\Generated\InvalidSpace();
            $xfer += $this->invalidSpace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getSectionsBySpace_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter46 => $iter47)
          {
            if (is_scalar($iter47)) {
            $xfer += $iter46->write($output);
            } else {
            $xfer += $iter47->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidSpace !== null) {
      $xfer += $output->writeFieldBegin('invalidSpace', TType::STRUCT, 1);
      $xfer += $this->invalidSpace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addSection_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $generalAdmission = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $seatPreference = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'generalAdmission',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generalAdmission'])) {
        $this->generalAdmission = $vals['generalAdmission'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
    }
  }

  public function getName() {
    return 'Venues_addSection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generalAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addSection_args');
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 1);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalAdmission !== null) {
      $xfer += $output->writeFieldBegin('generalAdmission', TType::BOOL, 4);
      $xfer += $output->writeBool($this->generalAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 5);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 6);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addSection_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSpace
   */
  public $invalidSpace = null;
  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSpace',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSpace',
          ),
        2 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSpace'])) {
        $this->invalidSpace = $vals['invalidSpace'];
      }
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
    }
  }

  public function getName() {
    return 'Venues_addSection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSpace = new \TicketService\Generated\InvalidSpace();
            $xfer += $this->invalidSpace->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addSection_result');
    if ($this->invalidSpace !== null) {
      $xfer += $output->writeFieldBegin('invalidSpace', TType::STRUCT, 1);
      $xfer += $this->invalidSpace->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 2);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editSection_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $generalAdmission = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $seatPreference = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'generalAdmission',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generalAdmission'])) {
        $this->generalAdmission = $vals['generalAdmission'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
    }
  }

  public function getName() {
    return 'Venues_editSection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generalAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editSection_args');
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 1);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalAdmission !== null) {
      $xfer += $output->writeFieldBegin('generalAdmission', TType::BOOL, 4);
      $xfer += $output->writeBool($this->generalAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 5);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 6);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editSection_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
    }
  }

  public function getName() {
    return 'Venues_editSection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editSection_result');
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 1);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeSection_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeSection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeSection_args');
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 1);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeSection_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeSection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeSection_result');
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 1);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getRowsBySection_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $spaceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
    }
  }

  public function getName() {
    return 'Venues_getRowsBySection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getRowsBySection_args');
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 1);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getRowsBySection_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Row[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Row',
            ),
          ),
        1 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
    }
  }

  public function getName() {
    return 'Venues_getRowsBySection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readSetBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $elem53 = new \TicketService\Generated\Row();
              $xfer += $elem53->read($input);
              if (is_scalar($elem53)) {
                $this->success[$elem53] = true;
              } else {
                $this->success []= $elem53;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getRowsBySection_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter54 => $iter55)
          {
            if (is_scalar($iter55)) {
            $xfer += $iter54->write($output);
            } else {
            $xfer += $iter55->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 1);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addRow_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $generalAdmission = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $seatPreference = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'generalAdmission',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generalAdmission'])) {
        $this->generalAdmission = $vals['generalAdmission'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
    }
  }

  public function getName() {
    return 'Venues_addRow_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generalAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addRow_args');
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 1);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalAdmission !== null) {
      $xfer += $output->writeFieldBegin('generalAdmission', TType::BOOL, 5);
      $xfer += $output->writeBool($this->generalAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 6);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 7);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addRow_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSection
   */
  public $invalidSection = null;
  /**
   * @var \TicketService\Generated\InvalidRow
   */
  public $invalidRow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSection',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSection',
          ),
        2 => array(
          'var' => 'invalidRow',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidRow',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSection'])) {
        $this->invalidSection = $vals['invalidSection'];
      }
      if (isset($vals['invalidRow'])) {
        $this->invalidRow = $vals['invalidRow'];
      }
    }
  }

  public function getName() {
    return 'Venues_addRow_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSection = new \TicketService\Generated\InvalidSection();
            $xfer += $this->invalidSection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidRow = new \TicketService\Generated\InvalidRow();
            $xfer += $this->invalidRow->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addRow_result');
    if ($this->invalidSection !== null) {
      $xfer += $output->writeFieldBegin('invalidSection', TType::STRUCT, 1);
      $xfer += $this->invalidSection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidRow !== null) {
      $xfer += $output->writeFieldBegin('invalidRow', TType::STRUCT, 2);
      $xfer += $this->invalidRow->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editRow_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var bool
   */
  public $generalAdmission = null;
  /**
   * @var int
   */
  public $maxCapacity = null;
  /**
   * @var int
   */
  public $seatPreference = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'generalAdmission',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'maxCapacity',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['generalAdmission'])) {
        $this->generalAdmission = $vals['generalAdmission'];
      }
      if (isset($vals['maxCapacity'])) {
        $this->maxCapacity = $vals['maxCapacity'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
    }
  }

  public function getName() {
    return 'Venues_editRow_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generalAdmission);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editRow_args');
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 1);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generalAdmission !== null) {
      $xfer += $output->writeFieldBegin('generalAdmission', TType::BOOL, 5);
      $xfer += $output->writeBool($this->generalAdmission);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxCapacity !== null) {
      $xfer += $output->writeFieldBegin('maxCapacity', TType::I32, 6);
      $xfer += $output->writeI32($this->maxCapacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 7);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editRow_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidRow
   */
  public $invalidRow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidRow',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidRow',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidRow'])) {
        $this->invalidRow = $vals['invalidRow'];
      }
    }
  }

  public function getName() {
    return 'Venues_editRow_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidRow = new \TicketService\Generated\InvalidRow();
            $xfer += $this->invalidRow->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editRow_result');
    if ($this->invalidRow !== null) {
      $xfer += $output->writeFieldBegin('invalidRow', TType::STRUCT, 1);
      $xfer += $this->invalidRow->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeRow_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeRow_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeRow_args');
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 1);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeRow_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidRow
   */
  public $invalidRow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidRow',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidRow',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidRow'])) {
        $this->invalidRow = $vals['invalidRow'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeRow_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidRow = new \TicketService\Generated\InvalidRow();
            $xfer += $this->invalidRow->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeRow_result');
    if ($this->invalidRow !== null) {
      $xfer += $output->writeFieldBegin('invalidRow', TType::STRUCT, 1);
      $xfer += $this->invalidRow->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getSeatsByRow_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
    }
  }

  public function getName() {
    return 'Venues_getSeatsByRow_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getSeatsByRow_args');
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 1);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_getSeatsByRow_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\Seat[]
   */
  public $success = null;
  /**
   * @var \TicketService\Generated\InvalidRow
   */
  public $invalidRow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TicketService\Generated\Seat',
            ),
          ),
        1 => array(
          'var' => 'invalidRow',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidRow',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['invalidRow'])) {
        $this->invalidRow = $vals['invalidRow'];
      }
    }
  }

  public function getName() {
    return 'Venues_getSeatsByRow_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readSetBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \TicketService\Generated\Seat();
              $xfer += $elem61->read($input);
              if (is_scalar($elem61)) {
                $this->success[$elem61] = true;
              } else {
                $this->success []= $elem61;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidRow = new \TicketService\Generated\InvalidRow();
            $xfer += $this->invalidRow->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_getSeatsByRow_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter62 => $iter63)
          {
            if (is_scalar($iter63)) {
            $xfer += $iter62->write($output);
            } else {
            $xfer += $iter63->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidRow !== null) {
      $xfer += $output->writeFieldBegin('invalidRow', TType::STRUCT, 1);
      $xfer += $this->invalidRow->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addSeat_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $seatPreference = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
    }
  }

  public function getName() {
    return 'Venues_addSeat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addSeat_args');
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 1);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 4);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 6);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_addSeat_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidRow
   */
  public $invalidRow = null;
  /**
   * @var \TicketService\Generated\InvalidSeat
   */
  public $invalidSeat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidRow',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidRow',
          ),
        2 => array(
          'var' => 'invalidSeat',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSeat',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidRow'])) {
        $this->invalidRow = $vals['invalidRow'];
      }
      if (isset($vals['invalidSeat'])) {
        $this->invalidSeat = $vals['invalidSeat'];
      }
    }
  }

  public function getName() {
    return 'Venues_addSeat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidRow = new \TicketService\Generated\InvalidRow();
            $xfer += $this->invalidRow->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->invalidSeat = new \TicketService\Generated\InvalidSeat();
            $xfer += $this->invalidSeat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_addSeat_result');
    if ($this->invalidRow !== null) {
      $xfer += $output->writeFieldBegin('invalidRow', TType::STRUCT, 1);
      $xfer += $this->invalidRow->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidSeat !== null) {
      $xfer += $output->writeFieldBegin('invalidSeat', TType::STRUCT, 2);
      $xfer += $this->invalidSeat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editSeat_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $seatPreference = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'seatPreference',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['seatPreference'])) {
        $this->seatPreference = $vals['seatPreference'];
      }
    }
  }

  public function getName() {
    return 'Venues_editSeat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatPreference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editSeat_args');
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 1);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 4);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seatPreference !== null) {
      $xfer += $output->writeFieldBegin('seatPreference', TType::I32, 6);
      $xfer += $output->writeI32($this->seatPreference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_editSeat_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSeat
   */
  public $invalidSeat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSeat',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSeat',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSeat'])) {
        $this->invalidSeat = $vals['invalidSeat'];
      }
    }
  }

  public function getName() {
    return 'Venues_editSeat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSeat = new \TicketService\Generated\InvalidSeat();
            $xfer += $this->invalidSeat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_editSeat_result');
    if ($this->invalidSeat !== null) {
      $xfer += $output->writeFieldBegin('invalidSeat', TType::STRUCT, 1);
      $xfer += $this->invalidSeat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeSeat_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $seatId = null;
  /**
   * @var int
   */
  public $spaceId = null;
  /**
   * @var int
   */
  public $sectionId = null;
  /**
   * @var int
   */
  public $rowId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'seatId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spaceId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sectionId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rowId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['seatId'])) {
        $this->seatId = $vals['seatId'];
      }
      if (isset($vals['spaceId'])) {
        $this->spaceId = $vals['spaceId'];
      }
      if (isset($vals['sectionId'])) {
        $this->sectionId = $vals['sectionId'];
      }
      if (isset($vals['rowId'])) {
        $this->rowId = $vals['rowId'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeSeat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spaceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sectionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rowId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeSeat_args');
    if ($this->seatId !== null) {
      $xfer += $output->writeFieldBegin('seatId', TType::I32, 1);
      $xfer += $output->writeI32($this->seatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spaceId !== null) {
      $xfer += $output->writeFieldBegin('spaceId', TType::I64, 2);
      $xfer += $output->writeI64($this->spaceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sectionId !== null) {
      $xfer += $output->writeFieldBegin('sectionId', TType::I32, 3);
      $xfer += $output->writeI32($this->sectionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rowId !== null) {
      $xfer += $output->writeFieldBegin('rowId', TType::I32, 4);
      $xfer += $output->writeI32($this->rowId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Venues_removeSeat_result {
  static $_TSPEC;

  /**
   * @var \TicketService\Generated\InvalidSeat
   */
  public $invalidSeat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invalidSeat',
          'type' => TType::STRUCT,
          'class' => '\TicketService\Generated\InvalidSeat',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invalidSeat'])) {
        $this->invalidSeat = $vals['invalidSeat'];
      }
    }
  }

  public function getName() {
    return 'Venues_removeSeat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->invalidSeat = new \TicketService\Generated\InvalidSeat();
            $xfer += $this->invalidSeat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Venues_removeSeat_result');
    if ($this->invalidSeat !== null) {
      $xfer += $output->writeFieldBegin('invalidSeat', TType::STRUCT, 1);
      $xfer += $this->invalidSeat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


